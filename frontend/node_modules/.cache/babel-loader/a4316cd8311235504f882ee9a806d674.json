{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport noteService from \"./noteService\";\nconst initialState = {\n  goals: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nexport const createNote = createAsyncThunk('notes/create', async (noteData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await noteService.createNote(noteData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const getNotes = createAsyncThunk('notes/getAll', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await goalService.getNotes(token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createNote.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNote.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.goals.push(action.payload);\n    }).addCase(createNote.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = noteSlice.actions;\nexport default noteSlice.reducer;","map":{"version":3,"sources":["/Users/ayush/notesss-app/frontend/src/notes/noteSlice.js"],"names":["createSlice","createAsyncThunk","noteService","initialState","goals","isError","isSuccess","isLoading","message","createNote","noteData","thunkAPI","token","getState","auth","user","error","response","data","toString","rejectWithValue","getNotes","_","goalService","noteSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport noteService from \"./noteService\";\n\nconst initialState = {\n    goals: [],\n    isError: false,\n    isSuccess: false,\n    isLoading: false,\n    message: '',\n}\n\nexport const createNote = createAsyncThunk('notes/create', async(noteData, thunkAPI) => {\n    try{\n        const token = thunkAPI.getState().auth.user.token \n        return await noteService.createNote(noteData, token)\n\n    }catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n})\n\nexport const getNotes = createAsyncThunk(\n  'notes/getAll',\n  async (_, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await goalService.getNotes(token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\nexport const noteSlice = createSlice({\n      name: 'note',\n      initialState,\n      reducers: {\n          reset: (state) => initialState,\n      },\n      extraReducers: (builder) => {\n          builder\n          .addCase(createNote.pending, (state) => {\n              state.isLoading = true\n          })\n          .addCase(createNote.fulfilled, (state, action) => {\n              state.isLoading = false\n              state.isSuccess = true\n              state.goals.push(action.payload)\n          })\n          .addCase(createNote.rejected, (state, action) => {\n            state.isLoading = false\n            state.isSuccess = true\n            state.message = action.payload\n        })\n        \n      }\n})\n\nexport const {reset} = noteSlice.actions\nexport default noteSlice.reducer\n\n\n\n"]},"metadata":{},"sourceType":"module"}